## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
## Logging settings

# log level options: OFF, ERROR, WARNING, INFO, DEBUG
log.level = "DEBUG"

# path to deploy temporary files for logging system
log.deployment-path = ${base-path}"/"

# define sinks here (disable logging by passing it to /dev/null)
log.sinks = [
  {
    name = "console"
    file-path = "//console"
  },
  {
    name = "application"
    file-path = ${base-path}"/application.log"
    charset = "UTF-8"
  },
  {
    name = "statistics"
    file-path = ${base-path}"/stats.log"
    charset = "UTF-8"
  }
]

# define mapping from loggers to sinks
log.logger-sink-mapping = {
  "systems.opalia.service.base.database.api.DatabaseService-statistics" = ["statistics"]
  "systems.opalia.service.base.worker.api.WorkerService-statistics" = ["statistics"]
  "systems.opalia.service.base.http.api.HttpService-statistics" = ["statistics"]
}

# the default sinks for all unmapped loggers
log.logger-sink-mapping-default = ["console", "application"]

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
## VFS settings

# This values must be changed!
# Make sure that all nodes in the cluster share the same secrets.
vfs.cipher-secret = "js2dz3fd7az0fmysls9dalte56in4d2u3jgg60bk34se"
vfs.mac-secret = "js2dz4o4l7az0fmysls927925okalte56in4d2u3jqlb5k60b4se"

# delete uncommitted files in this interval
vfs.cleanup-interval = "20 minutes"

# define file systems
vfs.file-systems = [
  {
    name = "backup"
    uri = "file:"${base-path}"/storage/backup"
    disposable = false
    encryption = true
    compression = true
  },
  {
    name = "asset"
    uri = "file:"${base-path}"/storage/asset"
    disposable = false
    encryption = true
    compression = false
  },
  {
    name = "cache"
    uri = "file:"${base-path}"/storage/cache"
    disposable = true
    encryption = false
    compression = false
  }
]

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
## HTTP settings

http {
  akka {

    http {
      server {
        # The time after which an idle connection will be automatically closed.
        # Set to `infinite` to completely disable idle connection timeouts.
        idle-timeout = 60 s

        # Defines the default time period within which the application has to
        # produce an HttpResponse for any given HttpRequest it received.
        # The timeout begins to run when the *end* of the request has been
        # received, so even potentially long uploads can have a short timeout.
        # Set to `infinite` to completely disable request timeout checking.
        #
        # If this setting is not `infinite` the HTTP server layer attaches a
        # `Timeout-Access` header to the request, which enables programmatic
        # customization of the timeout period and timeout response for each
        # request individually.
        request-timeout = 20 s

        # The time period within which the TCP binding process must be completed.
        bind-timeout = 3 s

        # The maximum number of concurrently accepted connections when using the
        # `Http().bindAndHandle` methods.
        #
        # This setting doesn't apply to the `Http().bind` method which will still
        # deliver an unlimited backpressured stream of incoming connections.
        #
        # Note, that this setting limits the number of the connections on a best-effort basis.
        # It does *not* strictly guarantee that the number of established TCP connections will never
        # exceed the limit (but it will be approximately correct) because connection termination happens
        # asynchronously. It also does *not* guarantee that the number of concurrently active handler
        # flow materializations will never exceed the limit for the reason that it is impossible to reliably
        # detect when a materialization has ended.
        max-connections = 1024

        # The maximum number of requests that are accepted (and dispatched to
        # the application) on one single connection before the first request
        # has to be completed.
        # Incoming requests that would cause the pipelining limit to be exceeded
        # are not read from the connections socket so as to build up "back-pressure"
        # to the client via TCP flow control.
        # A setting of 1 disables HTTP pipelining, since only one request per
        # connection can be "open" (i.e. being processed by the application) at any
        # time. Set to higher values to enable HTTP pipelining.
        # This value must be > 0 and <= 1024.
        pipelining-limit = 16

        # Enables/disables automatic handling of HEAD requests.
        # If this setting is enabled the server dispatches HEAD requests as GET
        # requests to the application and automatically strips off all message
        # bodies from outgoing responses.
        # Note that, even when this setting is off the server will never send
        # out message bodies on responses to HEAD requests.
        transparent-head-requests = on

        # The requested maximum length of the queue of incoming connections.
        # If the server is busy and the backlog is full the OS will start dropping
        # SYN-packets and connection attempts may fail. Note, that the backlog
        # size is usually only a maximum size hint for the OS and the OS can
        # restrict the number further based on global limits.
        backlog = 100

        # If this setting is empty the server only accepts requests that carry a
        # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
        # Set to a non-empty value to be used in lieu of a missing or empty `Host`
        # header to make the server accept such requests.
        # Note that the server will never accept HTTP/1.1 request without a `Host`
        # header, i.e. this setting only affects HTTP/1.1 requests with an empty
        # `Host` header as well as HTTP/1.0 requests.
        # Examples: `www.spray.io` or `example.com:8080`
        default-host-header = ""

        # Socket options to set for the listening socket. If a setting is left
        # undefined, it will use whatever the default on the system is.
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = undefined
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }

        # Modify to tweak parsing settings on the server-side only.
        parsing {
          # The limits for the various parts of the HTTP message parser.
          max-uri-length = 2k
          max-method-length = 16
          max-response-reason-length = 64
          max-header-name-length = 64
          max-header-value-length = 8k
          max-header-count = 64
          max-chunk-ext-length = 256
          max-chunk-size = 1m

          # Default maximum content length which should not be exceeded by incoming request entities.
          # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
          # Note that it is not necessarily a problem to set this to a high value as all stream operations
          # are always properly backpressured.
          # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
          # an excessive amount of server resources.
          #
          # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
          # programmatically via `withSizeLimit`.)
          max-content-length = 30m
        }

        # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
        # client for debugging reasons.
        #
        # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
        #
        # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
        # specify the number of bytes to log per chunk of data (the actual chunking depends
        # on implementation details and networking conditions and should be treated as
        # arbitrary).
        #
        # For logging on the server side, see akka.http.server.log-unencrypted-network-bytes.
        #
        # `off` : no log messages are produced
        # Int   : determines how many bytes should be logged per data chunk
        log-unencrypted-network-bytes = off
      }
    }
  }

  ssl {
    enabled = false
    key-store-name = "PKCS12"
    key-store-path = "./cert/server.p12"
    key-store-password = ""
  }
}

## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
